#include <stdio.h>
#include <stdlib.h>

#define Max 100
struct TreeNode {
    int data;
};
struct TreeNode tree[Max];
void insert(int value, int index) {
    if (index < Max) {
        tree[index].data = value;
    } else {
        printf("Tree is full.\n");
    }
}
int getLeftChild(int index) {
    int leftIndex = 2 * index;
    if (leftIndex < Max) {
        return leftIndex;
    } else {
        return -1;
    }
}
int getRightChild(int index) {
    int rightIndex = 2 * index + 1;
    if (rightIndex < Max) {
        return rightIndex;
    } else {
        return -1;
    }
}
void printTree(int index) {
    if (index < Max && tree[index].data != 0) {
        printf("%d ", tree[index].data);
        printTree(getLeftChild(index));
        printTree(getRightChild(index));
    }
}
int main() {
    int value, index = 1;
    printf("Enter the value for the root node: ");
    scanf("%d", &value);
    insert(value, index);
    printf("Enter value and index for additional nodes (0 to stop):\n");
    while (1) {
        printf("Value: ");
        scanf("%d", &value);
        if (value == 0) {
            break;
        }
        printf("Index: ");
        scanf("%d", &index);
        insert(value, index);
    }
    printf("Binary Tree: ");
    printTree(1);
    return 0;
}



2

#include <stdio.h>
#include <stdlib.h>

#define Max 100
struct TreeNode {
    int data;
};
struct TreeNode tree[Max];
void initializeTree() {
    for (int i = 0; i < Max; i++) {
        tree[i].data = -1;
    }
}
void insert(int value, int index) {
    if (index < Max && tree[index].data == -1) {
        tree[index].data = value;
    } else {
        printf("Insertion failed. Index out of bounds or already occupied.\n");
    }
}
void printTree() {
    printf("Tree Elements: ");
    for (int i = 0; i < Max; i++) {
        if (tree[i].data != -1) {
            printf("%d ", tree[i].data);
        }
    }
    printf("\n");
}
int main() {
    initializeTree();
    insert(10, 0);
    insert(5, 1); 
    insert(15, 2);
    insert(3, 3);
    insert(7, 4);
    printTree();
    return 0;
}
